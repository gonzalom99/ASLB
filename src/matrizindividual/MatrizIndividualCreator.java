package matrizindividual;

import net.sf.jclec.ISpecies;
import net.sf.jclec.base.AbstractCreator;
import net.sf.jclec.util.intset.IIntegerSet;

/**
 * Creation of OrderArrayIndividual (and subclasses).
 *  
 * @author Alberto Cano
 * @author Jose Maria Luna
 * @author Juan Luis Olmo
 * @author Amelia Zafra
 * @author Sebastian Ventura
 */

public class MatrizIndividualCreator extends AbstractCreator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -2638928425169895614L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	/** Associated species */
	
	protected transient IMatrizSpecies species;
	
	/** Genotype schema */
	
	protected transient IIntegerSet [][] schema;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	
	public MatrizIndividualCreator() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	// java.lang.Object methods

	public boolean equals(Object other)
	{
		if (other instanceof MatrizIndividualCreator){
			return true;
		}
		else {
			return false;
		}
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////

	// AbstractCreator methods

	@Override
	protected void prepareCreation() 
	{
		ISpecies spc = context.getSpecies();
		if (spc instanceof IMatrizSpecies) {
			// Sets individual species
			this.species = (IMatrizSpecies) spc;
			// Sets genotype schema
			this.schema = this.species.getGenotypeSchema();
		}
		else {
			throw new IllegalStateException("Illegal species in context");
		}
	}

	@Override
	protected void createNext() 
	{
		createdBuffer.add(species.createIndividual(createGenotype()));
	}
	
	/////////////////////////////////////////////////////////////////
	// ---------------------------------------------- Private methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Create a int [][] genotype, filling it randomly
	 */
	
	private final int[][] createGenotype()
	{
		// Genotype length
		int gl = schema.length;
		int gl2 = schema[0].length;
		int [] duracion = MatrizIndividual.getDuracion();
		
		// New genotype
		int [][] genotype = new int[gl][gl2];
        
		//se inicializa matriz genotype en 0s
        for(int i=0; i< gl; i++){
			for(int j=0; j< gl2; j++){
				genotype[i][j] = 0;
			}        
		}
        
        for(int k=0; k<gl2; k++) {
			int posicion= (int) (Math.random() * 3);
			genotype[posicion][k]= duracion[k];
		}
		
		return genotype;
	}	
	
	private void removeNode(int [] route, int position, int index)
	{
		int aux;

		aux = route[position];
	    route[position] = route[index];
	    route[index] = aux;
	}
}